
from flask import Flask, request, jsonify
from flask_cors import CORS
from google import genai  # Official Gemini SDK
import time
from collections import deque

app = Flask(__name__)
CORS(app, origins="*") # Frontend URL

# Gemini API keys and cooldown logic
API_KEYS = deque([
    "AIzaSyCt30CN5JoEMYaehlYOGyjK2grhN3kAsVQ",
    "AIzaSyCe8YJSH_UhFyGIXgqDWUeuR72H9hLRncA",
    "AIzaSyAsxbwp4OOlkmZEjU7Yklk3o25YTmaEocE",
    "AIzaSyBjHRQgF4GCoY6uLoWM6ts8SKX8wyl4fZA",
    "AIzaSyAd2v3JE90IiB5DqpXKK9gXHXzZ50WvfHs",
    "AIzaSyD1SHvEG9iTYg7giwhbZbap6ZdQaG9pYRg",
    "AIzaSyA7XiiZ9RNLZWW0-bR1MEqzjttH36pXB0A",
    "AIzaSyAZ_V1NdNSLn_u0HVtHlTuRKFn2rfRu_gI",
    "AIzaSyBsBLsuRSZ0XwnLfTzz5MKUoHZANMiHGLE",
    "AIzaSyDAilLWusZ_K9WQRFBX3XT7wdd9rPD0QT0",
    "AIzaSyDrMkkBe8d16pciuaEbGtS6rvKmpV2TBHc",
    "AIzaSyCRRjvZdjlf0COq4iDJBSD8MNKOBUos7FU",
    "AIzaSyDDCVD2E7tFVdS_roo3oK7FGNn1IO3R9UY",
])
COOLDOWN = 60  # seconds
cooldowns = {}

def get_available_key():
    current_time = time.time()
    for _ in range(len(API_KEYS)):
        key = API_KEYS[0]
        API_KEYS.rotate(-1)
        if key not in cooldowns or current_time >= cooldowns[key]:
            return key
    print("⏳ All keys cooling down. Waiting 2s...")
    time.sleep(2)
    return get_available_key()

def set_cooldown(key):
    cooldowns[key] = time.time() + COOLDOWN


def build_prompt(data: dict) -> str:
    source = data.get("source", "").lower()

    company_info = (
        "We are Vixalyze (vixalyze.com), a digital marketing and IT consultancy company. "
        "We provide website development, design, digital marketing, SEO, and related services. "
        "Please include the company name 'Vixalyze' in the message. "
        "Write the message in simple, easy-to-read words so anyone can understand. "
        "Do not mention any business or personal names in the message to ensure privacy. "
    )

    if source == "google maps":
        business_name = data.get("business_name", "").strip()
        category = data.get("category", "").strip()
        rating = data.get("rating", "")
        website = data.get("website", "").strip()
        total_reviews = data.get("total_reviews", "")

        prompt = company_info
        prompt += f"The business is in category: \"{category}\". "
        if business_name:
            prompt += f"Business name (generic reference): \"{business_name}\". "
        if rating:
            prompt += f"It has a rating of {rating} stars"
            if total_reviews:
                prompt += f" based on {total_reviews} reviews"
            prompt += ". "
        if website:
            prompt += f"Website: {website}. "

        prompt += ("Write a friendly WhatsApp follow-up message that includes the company name 'Vixalyze' and encourages the lead to contact us for any website, marketing, or IT needs. Use simple, easy words.")
        return prompt
    elif source == "instagram":
        profile_name = data.get("profile_name", "").strip()
        followers = data.get("followers", "")

        prompt = company_info
        if profile_name:
            prompt += f"The Instagram profile is named \"{profile_name}\". "
        if followers:
            prompt += f"This profile has approximately {followers} followers. "

        prompt += ("Craft a friendly WhatsApp follow-up message that includes the company name 'Vixalyze' and encourages the lead to contact us for digital marketing or IT services. Use simple, easy words.")
        return prompt
    else:
        prompt = company_info
        prompt += "The lead source is unknown. Generate a polite, general follow-up message that includes the company name 'Vixalyze' and encourages the lead to consider us for their website, marketing, or IT needs. Use simple, easy words."
        return prompt


@app.route("/api/generate-whatsapp-message", methods=["POST"])
def generate_whatsapp_message():
    try:
        data = request.get_json()

        prompt = build_prompt(data)


        while True:
            key = get_available_key()
            try:
                genai_client = genai.Client(api_key=key)
                response = genai_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=prompt,
                    config={
                        "temperature": 0.7,
                    }
                )
                message = getattr(response, "text", "").strip()
                if not message:
                    return jsonify({
                        "detail": "No message generated by Gemini API.",
                        "raw_response": str(response)
                    }), 500
                return jsonify({"message": message})
            except Exception as e:
                err = str(e)
                # Rotate key on quota, 429, or model overloaded (503 UNAVAILABLE)
                if (
                    "429" in err
                    or "quota" in err.lower()
                    or "503" in err
                    or "unavailable" in err.lower()
                    or "model is overloaded" in err.lower()
                ):
                    print(f"⚠️ Quota or overload for key. Cooling down: {key}")
                    set_cooldown(key)
                    continue
                print(f"❌ Unexpected error with key {key}: {e}")
                return jsonify({"detail": f"Failed to generate message: {str(e)}"}), 500

    except Exception as e:
        return jsonify({"detail": f"Failed to generate message: {str(e)}"}), 500


if __name__ == "__main__":
    # For local dev, debug True. Use production WSGI server (gunicorn/uvicorn) for production.
    app.run(host="0.0.0.0", port=8000, debug=True)


